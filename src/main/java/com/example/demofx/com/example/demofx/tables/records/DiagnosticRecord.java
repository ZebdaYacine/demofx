/*
 * This file is generated by jOOQ.
 */
package com.example.demofx.tables.records;


import com.example.demofx.tables.Diagnostic;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DiagnosticRecord extends UpdatableRecordImpl<DiagnosticRecord> implements Record11<Long, LocalDate, String, Long, Long, String, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>doctorlite.diagnostic.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.dateDiagnostic</code>.
     */
    public void setDatediagnostic(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.dateDiagnostic</code>.
     */
    public LocalDate getDatediagnostic() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.sickness</code>.
     */
    public void setSickness(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.sickness</code>.
     */
    public String getSickness() {
        return (String) get(2);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.idPatient</code>.
     */
    public void setIdpatient(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.idPatient</code>.
     */
    public Long getIdpatient() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.idFollow</code>.
     */
    public void setIdfollow(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.idFollow</code>.
     */
    public Long getIdfollow() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.mediclaDiagnostic</code>.
     */
    public void setMedicladiagnostic(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.mediclaDiagnostic</code>.
     */
    public String getMedicladiagnostic() {
        return (String) get(5);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.psychologyDiagnostic</code>.
     */
    public void setPsychologydiagnostic(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.psychologyDiagnostic</code>.
     */
    public String getPsychologydiagnostic() {
        return (String) get(6);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.interviewDynamics</code>.
     */
    public void setInterviewdynamics(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.interviewDynamics</code>.
     */
    public String getInterviewdynamics() {
        return (String) get(7);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.conclusion</code>.
     */
    public void setConclusion(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.conclusion</code>.
     */
    public String getConclusion() {
        return (String) get(8);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.recipePsuchologist</code>.
     */
    public void setRecipepsuchologist(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.recipePsuchologist</code>.
     */
    public String getRecipepsuchologist() {
        return (String) get(9);
    }

    /**
     * Setter for <code>doctorlite.diagnostic.recipeMedicale</code>.
     */
    public void setRecipemedicale(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>doctorlite.diagnostic.recipeMedicale</code>.
     */
    public String getRecipemedicale() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, LocalDate, String, Long, Long, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, LocalDate, String, Long, Long, String, String, String, String, String, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Diagnostic.DIAGNOSTIC.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Diagnostic.DIAGNOSTIC.DATEDIAGNOSTIC;
    }

    @Override
    public Field<String> field3() {
        return Diagnostic.DIAGNOSTIC.SICKNESS;
    }

    @Override
    public Field<Long> field4() {
        return Diagnostic.DIAGNOSTIC.IDPATIENT;
    }

    @Override
    public Field<Long> field5() {
        return Diagnostic.DIAGNOSTIC.IDFOLLOW;
    }

    @Override
    public Field<String> field6() {
        return Diagnostic.DIAGNOSTIC.MEDICLADIAGNOSTIC;
    }

    @Override
    public Field<String> field7() {
        return Diagnostic.DIAGNOSTIC.PSYCHOLOGYDIAGNOSTIC;
    }

    @Override
    public Field<String> field8() {
        return Diagnostic.DIAGNOSTIC.INTERVIEWDYNAMICS;
    }

    @Override
    public Field<String> field9() {
        return Diagnostic.DIAGNOSTIC.CONCLUSION;
    }

    @Override
    public Field<String> field10() {
        return Diagnostic.DIAGNOSTIC.RECIPEPSUCHOLOGIST;
    }

    @Override
    public Field<String> field11() {
        return Diagnostic.DIAGNOSTIC.RECIPEMEDICALE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDatediagnostic();
    }

    @Override
    public String component3() {
        return getSickness();
    }

    @Override
    public Long component4() {
        return getIdpatient();
    }

    @Override
    public Long component5() {
        return getIdfollow();
    }

    @Override
    public String component6() {
        return getMedicladiagnostic();
    }

    @Override
    public String component7() {
        return getPsychologydiagnostic();
    }

    @Override
    public String component8() {
        return getInterviewdynamics();
    }

    @Override
    public String component9() {
        return getConclusion();
    }

    @Override
    public String component10() {
        return getRecipepsuchologist();
    }

    @Override
    public String component11() {
        return getRecipemedicale();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDatediagnostic();
    }

    @Override
    public String value3() {
        return getSickness();
    }

    @Override
    public Long value4() {
        return getIdpatient();
    }

    @Override
    public Long value5() {
        return getIdfollow();
    }

    @Override
    public String value6() {
        return getMedicladiagnostic();
    }

    @Override
    public String value7() {
        return getPsychologydiagnostic();
    }

    @Override
    public String value8() {
        return getInterviewdynamics();
    }

    @Override
    public String value9() {
        return getConclusion();
    }

    @Override
    public String value10() {
        return getRecipepsuchologist();
    }

    @Override
    public String value11() {
        return getRecipemedicale();
    }

    @Override
    public DiagnosticRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DiagnosticRecord value2(LocalDate value) {
        setDatediagnostic(value);
        return this;
    }

    @Override
    public DiagnosticRecord value3(String value) {
        setSickness(value);
        return this;
    }

    @Override
    public DiagnosticRecord value4(Long value) {
        setIdpatient(value);
        return this;
    }

    @Override
    public DiagnosticRecord value5(Long value) {
        setIdfollow(value);
        return this;
    }

    @Override
    public DiagnosticRecord value6(String value) {
        setMedicladiagnostic(value);
        return this;
    }

    @Override
    public DiagnosticRecord value7(String value) {
        setPsychologydiagnostic(value);
        return this;
    }

    @Override
    public DiagnosticRecord value8(String value) {
        setInterviewdynamics(value);
        return this;
    }

    @Override
    public DiagnosticRecord value9(String value) {
        setConclusion(value);
        return this;
    }

    @Override
    public DiagnosticRecord value10(String value) {
        setRecipepsuchologist(value);
        return this;
    }

    @Override
    public DiagnosticRecord value11(String value) {
        setRecipemedicale(value);
        return this;
    }

    @Override
    public DiagnosticRecord values(Long value1, LocalDate value2, String value3, Long value4, Long value5, String value6, String value7, String value8, String value9, String value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DiagnosticRecord
     */
    public DiagnosticRecord() {
        super(Diagnostic.DIAGNOSTIC);
    }

    /**
     * Create a detached, initialised DiagnosticRecord
     */
    public DiagnosticRecord(Long id, LocalDate datediagnostic, String sickness, Long idpatient, Long idfollow, String medicladiagnostic, String psychologydiagnostic, String interviewdynamics, String conclusion, String recipepsuchologist, String recipemedicale) {
        super(Diagnostic.DIAGNOSTIC);

        setId(id);
        setDatediagnostic(datediagnostic);
        setSickness(sickness);
        setIdpatient(idpatient);
        setIdfollow(idfollow);
        setMedicladiagnostic(medicladiagnostic);
        setPsychologydiagnostic(psychologydiagnostic);
        setInterviewdynamics(interviewdynamics);
        setConclusion(conclusion);
        setRecipepsuchologist(recipepsuchologist);
        setRecipemedicale(recipemedicale);
    }
}
