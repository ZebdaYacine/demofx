/*
 * This file is generated by jOOQ.
 */
package com.example.demofx.databaseManger.jooq.tables;


import com.example.demofx.databaseManger.jooq.Doctorlite;
import com.example.demofx.databaseManger.jooq.Indexes;
import com.example.demofx.databaseManger.jooq.Keys;
import com.example.demofx.databaseManger.jooq.tables.records.FollowRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Follow extends TableImpl<FollowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>doctorlite.follow</code>
     */
    public static final Follow FOLLOW = new Follow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowRecord> getRecordType() {
        return FollowRecord.class;
    }

    /**
     * The column <code>doctorlite.follow.id</code>.
     */
    public final TableField<FollowRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>doctorlite.follow.dateEnter</code>.
     */
    public final TableField<FollowRecord, LocalDate> DATEENTER = createField(DSL.name("dateEnter"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>doctorlite.follow.dateGo</code>.
     */
    public final TableField<FollowRecord, LocalDate> DATEGO = createField(DSL.name("dateGo"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>doctorlite.follow.idPatient</code>.
     */
    public final TableField<FollowRecord, Long> IDPATIENT = createField(DSL.name("idPatient"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>doctorlite.follow.idService</code>.
     */
    public final TableField<FollowRecord, Long> IDSERVICE = createField(DSL.name("idService"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>doctorlite.follow.idDoctor</code>.
     */
    public final TableField<FollowRecord, Long> IDDOCTOR = createField(DSL.name("idDoctor"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>doctorlite.follow.idPsychologist</code>.
     */
    public final TableField<FollowRecord, Long> IDPSYCHOLOGIST = createField(DSL.name("idPsychologist"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>doctorlite.follow.sickness</code>.
     */
    public final TableField<FollowRecord, String> SICKNESS = createField(DSL.name("sickness"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>doctorlite.follow.status</code>.
     */
    public final TableField<FollowRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    private Follow(Name alias, Table<FollowRecord> aliased) {
        this(alias, aliased, null);
    }

    private Follow(Name alias, Table<FollowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>doctorlite.follow</code> table reference
     */
    public Follow(String alias) {
        this(DSL.name(alias), FOLLOW);
    }

    /**
     * Create an aliased <code>doctorlite.follow</code> table reference
     */
    public Follow(Name alias) {
        this(alias, FOLLOW);
    }

    /**
     * Create a <code>doctorlite.follow</code> table reference
     */
    public Follow() {
        this(DSL.name("follow"), null);
    }

    public <O extends Record> Follow(Table<O> child, ForeignKey<O, FollowRecord> key) {
        super(child, key, FOLLOW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Doctorlite.DOCTORLITE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FOLLOW_IDDOCTOR, Indexes.FOLLOW_IDPATIENT, Indexes.FOLLOW_IDPSYCHOLOGIST, Indexes.FOLLOW_IDSERVICE);
    }

    @Override
    public Identity<FollowRecord, Long> getIdentity() {
        return (Identity<FollowRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FollowRecord> getPrimaryKey() {
        return Keys.KEY_FOLLOW_PRIMARY;
    }

    @Override
    public List<ForeignKey<FollowRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FOLLOW_IBFK_1, Keys.FOLLOW_IBFK_2, Keys.FOLLOW_IBFK_4, Keys.FOLLOW_IBFK_3);
    }

    private transient Patient _patient;
    private transient Service _service;
    private transient User _followIbfk_4;
    private transient User _followIbfk_3;

    /**
     * Get the implicit join path to the <code>doctorlite.patient</code> table.
     */
    public Patient patient() {
        if (_patient == null)
            _patient = new Patient(this, Keys.FOLLOW_IBFK_1);

        return _patient;
    }

    /**
     * Get the implicit join path to the <code>doctorlite.service</code> table.
     */
    public Service service() {
        if (_service == null)
            _service = new Service(this, Keys.FOLLOW_IBFK_2);

        return _service;
    }

    /**
     * Get the implicit join path to the <code>doctorlite.user</code> table, via
     * the <code>follow_ibfk_4</code> key.
     */
    public User followIbfk_4() {
        if (_followIbfk_4 == null)
            _followIbfk_4 = new User(this, Keys.FOLLOW_IBFK_4);

        return _followIbfk_4;
    }

    /**
     * Get the implicit join path to the <code>doctorlite.user</code> table, via
     * the <code>follow_ibfk_3</code> key.
     */
    public User followIbfk_3() {
        if (_followIbfk_3 == null)
            _followIbfk_3 = new User(this, Keys.FOLLOW_IBFK_3);

        return _followIbfk_3;
    }

    @Override
    public Follow as(String alias) {
        return new Follow(DSL.name(alias), this);
    }

    @Override
    public Follow as(Name alias) {
        return new Follow(alias, this);
    }

    @Override
    public Follow as(Table<?> alias) {
        return new Follow(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(String name) {
        return new Follow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Name name) {
        return new Follow(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Table<?> name) {
        return new Follow(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDate, LocalDate, Long, Long, Long, Long, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super LocalDate, ? super LocalDate, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super LocalDate, ? super LocalDate, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
