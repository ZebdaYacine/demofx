/*
 * This file is generated by jOOQ.
 */
package com.example.demofx.databaseManger.jooq;


import com.example.demofx.databaseManger.jooq.tables.Diagnostic;
import com.example.demofx.databaseManger.jooq.tables.Follow;
import com.example.demofx.databaseManger.jooq.tables.Patient;
import com.example.demofx.databaseManger.jooq.tables.Role;
import com.example.demofx.databaseManger.jooq.tables.Service;
import com.example.demofx.databaseManger.jooq.tables.Type;
import com.example.demofx.databaseManger.jooq.tables.User;
import com.example.demofx.databaseManger.jooq.tables.records.DiagnosticRecord;
import com.example.demofx.databaseManger.jooq.tables.records.FollowRecord;
import com.example.demofx.databaseManger.jooq.tables.records.PatientRecord;
import com.example.demofx.databaseManger.jooq.tables.records.RoleRecord;
import com.example.demofx.databaseManger.jooq.tables.records.ServiceRecord;
import com.example.demofx.databaseManger.jooq.tables.records.TypeRecord;
import com.example.demofx.databaseManger.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * doctorlite.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DiagnosticRecord> KEY_DIAGNOSTIC_PRIMARY = Internal.createUniqueKey(Diagnostic.DIAGNOSTIC, DSL.name("KEY_diagnostic_PRIMARY"), new TableField[] { Diagnostic.DIAGNOSTIC.ID }, true);
    public static final UniqueKey<FollowRecord> KEY_FOLLOW_PRIMARY = Internal.createUniqueKey(Follow.FOLLOW, DSL.name("KEY_follow_PRIMARY"), new TableField[] { Follow.FOLLOW.ID }, true);
    public static final UniqueKey<PatientRecord> KEY_PATIENT_PRIMARY = Internal.createUniqueKey(Patient.PATIENT, DSL.name("KEY_patient_PRIMARY"), new TableField[] { Patient.PATIENT.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<ServiceRecord> KEY_SERVICE_PRIMARY = Internal.createUniqueKey(Service.SERVICE, DSL.name("KEY_service_PRIMARY"), new TableField[] { Service.SERVICE.ID }, true);
    public static final UniqueKey<TypeRecord> KEY_TYPE_PRIMARY = Internal.createUniqueKey(Type.TYPE, DSL.name("KEY_type_PRIMARY"), new TableField[] { Type.TYPE.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DiagnosticRecord, PatientRecord> DIAGNOSTIC_IBFK_1 = Internal.createForeignKey(Diagnostic.DIAGNOSTIC, DSL.name("diagnostic_ibfk_1"), new TableField[] { Diagnostic.DIAGNOSTIC.IDPATIENT }, Keys.KEY_PATIENT_PRIMARY, new TableField[] { Patient.PATIENT.ID }, true);
    public static final ForeignKey<DiagnosticRecord, FollowRecord> DIAGNOSTIC_IBFK_2 = Internal.createForeignKey(Diagnostic.DIAGNOSTIC, DSL.name("diagnostic_ibfk_2"), new TableField[] { Diagnostic.DIAGNOSTIC.IDFOLLOW }, Keys.KEY_FOLLOW_PRIMARY, new TableField[] { Follow.FOLLOW.ID }, true);
    public static final ForeignKey<FollowRecord, PatientRecord> FOLLOW_IBFK_1 = Internal.createForeignKey(Follow.FOLLOW, DSL.name("follow_ibfk_1"), new TableField[] { Follow.FOLLOW.IDPATIENT }, Keys.KEY_PATIENT_PRIMARY, new TableField[] { Patient.PATIENT.ID }, true);
    public static final ForeignKey<FollowRecord, ServiceRecord> FOLLOW_IBFK_2 = Internal.createForeignKey(Follow.FOLLOW, DSL.name("follow_ibfk_2"), new TableField[] { Follow.FOLLOW.IDSERVICE }, Keys.KEY_SERVICE_PRIMARY, new TableField[] { Service.SERVICE.ID }, true);
    public static final ForeignKey<FollowRecord, UserRecord> FOLLOW_IBFK_3 = Internal.createForeignKey(Follow.FOLLOW, DSL.name("follow_ibfk_3"), new TableField[] { Follow.FOLLOW.IDPSYCHOLOGIST }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<FollowRecord, UserRecord> FOLLOW_IBFK_4 = Internal.createForeignKey(Follow.FOLLOW, DSL.name("follow_ibfk_4"), new TableField[] { Follow.FOLLOW.IDDOCTOR }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<UserRecord, TypeRecord> USER_IBFK_1 = Internal.createForeignKey(User.USER, DSL.name("user_ibfk_1"), new TableField[] { User.USER.IDTYPE }, Keys.KEY_TYPE_PRIMARY, new TableField[] { Type.TYPE.ID }, true);
    public static final ForeignKey<UserRecord, RoleRecord> USER_IBFK_2 = Internal.createForeignKey(User.USER, DSL.name("user_ibfk_2"), new TableField[] { User.USER.IDROLE }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRecord, ServiceRecord> USER_IBFK_3 = Internal.createForeignKey(User.USER, DSL.name("user_ibfk_3"), new TableField[] { User.USER.IDSERVICE }, Keys.KEY_SERVICE_PRIMARY, new TableField[] { Service.SERVICE.ID }, true);
}
